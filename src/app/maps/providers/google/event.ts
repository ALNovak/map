import { AbstractEvent } from "../../abstract/abstract-event";
import { Observable, Observer } from "rxjs";
import { Injectable } from "@angular/core";

@Injectable()
export class GoogleEvent extends AbstractEvent {
	constructor() {

		super();

	}

	listen<E>(eventName: string): Observable<E> {
		return new Observable((observer: Observer<E>) => {
			this.map.api.addListener(eventName, (arg: E) => { observer.next(arg); });
		});
	}

	idle<E>(): Observable<E> {
		return this.listen<E>('idle');
	}
	/**
	 * Generated by clicking on the map.
	 * @template E
	 * @returns {Observable<E>}
	 * @memberof GoogleEvent
	 */
	mapClicked<E>(): Observable<E> {
		return this.listen<E>('click');
	}

	zoomFinished<E>(): Observable<E> {
		return this.listen<E>('zoomend');
	}
	/**
	 *
	 * Generated after drag and drop map user.
	 * @template E
	 * @returns {Observable<E>}
	 * @memberof GoogleEvent
	 */
	dragFinished<E>(): Observable<E> {
		return this.listen<E>('dragend');
	}

	boundsChanged<E>(): Observable<E> {
		return this.listen<E>('boundscnhage');
	}
	/**
	 *
	  Generated after zoom map user
	 * @template E
	 * @returns {Observable<E>}
	 * @memberof GoogleEvent
	 */
	zoomChanged<E>(): Observable<E> {
		return this.listen<E>('zoomstart');
	}
}
